import React, { useState, useEffect, useContext, useRef } from 'react'
import { UserContext } from '../context/user.context'
import { useLocation } from 'react-router-dom'
import axios from '../config/axios'
import { initializeSocket, receiveMessage, sendMessage } from '../config/socket'
import Markdown from 'markdown-to-jsx'
import hljs from 'highlight.js';
import { getWebContainer } from '../config/webContainer'


function SyntaxHighlightedCode(props) {
    const ref = useRef(null)

    React.useEffect(() => {
        scrollToBottom();
        if (ref.current && props.className?.includes('lang-') && window.hljs) {
            window.hljs.highlightElement(ref.current)
            ref.current.removeAttribute('data-highlighted')
        }
    }, [props.className, props.children])

    return <code {...props} ref={ref} />
}


const Project = () => {
    const location = useLocation()
    const [isSidePanelOpen, setIsSidePanelOpen] = useState(false)
    const [isModalOpen, setIsModalOpen] = useState(false)
    const [selectedUserId, setSelectedUserId] = useState(new Set())
    const [project, setProject] = useState(location.state.project)
    const [message, setMessage] = useState('')
    const { user } = useContext(UserContext)
    const messageBox = React.createRef()
    const [users, setUsers] = useState([])
    const [messages, setMessages] = useState([])
    const [fileTree, setFileTree] = useState({})
    const [currentFile, setCurrentFile] = useState(null)
    const [openFiles, setOpenFiles] = useState([])
    const [webContainer, setWebContainer] = useState(null)
    const [iframeUrl, setIframeUrl] = useState(null)
    const [runProcess, setRunProcess] = useState(null)

    const handleUserClick = (id) => {
        setSelectedUserId(prevSelectedUserId => {
            const newSelectedUserId = new Set(prevSelectedUserId);
            if (newSelectedUserId.has(id)) {
                newSelectedUserId.delete(id);
            } else {
                newSelectedUserId.add(id);
            }
            return newSelectedUserId;
        });
    }

    function addCollaborators() {
        axios.put("/projects/add-user", {
            projectId: location.state.project._id,
            users: Array.from(selectedUserId)
        }).then(res => {
            console.log(res.data)
            setIsModalOpen(false)
        }).catch(err => {
            console.log(err)
        })
    }

    const send = () => {
        sendMessage('project-message', {
            message,
            sender: user
        })
        setMessages(prevMessages => [...prevMessages, { sender: user, message }])
        setMessage("")
    }

    function WriteAiMessage(message) {
        const messageObject = JSON.parse(message)
        return (
            <div className='overflow-auto bg-slate-950 text-white rounded-sm p-2'>
                <Markdown
                    children={messageObject.text}
                    options={{
                        overrides: {
                            code: SyntaxHighlightedCode,
                        },
                    }}
                />
            </div>
        )
    }

    useEffect(() => {
        initializeSocket(project._id)

        if (!webContainer) {
            getWebContainer().then(container => {
                setWebContainer(container)
                console.log("container started")
            })
        }

        receiveMessage('project-message', data => {
            console.log("ðŸ“© Incoming:", data)

            if (data.sender._id === 'ai') {
                let message
                try {
                    message = JSON.parse(data.message)
                } catch (e) {
                    setMessages(prev => [...prev, {
                        sender: { _id: "ai", email: "AI" },
                        message: data.message
                    }])
                    return
                }

                let updatedFileTree = { ...fileTree }

                // âœ… Only one function per AI response
                if (message.functions && message.functions.length > 0) {
                    const fn = message.functions[0] // take first function only

                    let ext = ".txt"
                    if (fn.language) {
                        if (fn.language.toLowerCase() === "java") ext = ".java"
                        else if (fn.language.toLowerCase() === "python") ext = ".py"
                        else if (fn.language.toLowerCase() === "javascript") ext = ".js"
                        else if (fn.language.toLowerCase() === "c++") ext = ".cpp"
                        else if (fn.language.toLowerCase() === "c") ext = ".c"
                    }

                    const fileName = `${fn.functionName}${ext}`
                    const fileContent = fn.code
                        ? fn.code
                        : `// ${fn.description || "Function generated by AI"}\n`

                    updatedFileTree[fileName] = {
                        file: { contents: fileContent }
                    }

                    const displayMessage = {
                        sender: { _id: "ai", email: "AI" },
                        message: `ðŸ’¾ Function **${fn.functionName}** saved as \`${fileName}\``,
                        fileName
                    }
                    setMessages(prevMessages => [...prevMessages, displayMessage])

                    setFileTree(updatedFileTree)
                    saveFileTree(updatedFileTree)
                }

                if (message.fileTree) {
                    webContainer?.mount(message.fileTree)
                    setFileTree(message.fileTree || {})
                }

                if (message.text) {
                    setMessages(prev => [
                        ...prev,
                        { sender: { _id: "ai", email: "AI" }, message: JSON.stringify({ text: message.text }) }
                    ])
                }
            } else {
                setMessages(prevMessages => [...prevMessages, data])
            }
        })

        axios.get(`/projects/get-project/${location.state.project._id}`).then(res => {
            setProject(res.data.project)
            setFileTree(res.data.project.fileTree || {})
        })

        axios.get('/users/all').then(res => {
            setUsers(res.data.users)
        }).catch(err => {
            console.log(err)
        })

    }, [])

    function saveFileTree(ft) {
        axios.put('/projects/update-file-tree', {
            projectId: project._id,
            fileTree: ft
        }).then(res => {
            console.log(res.data)
        }).catch(err => {
            console.log(err)
        })
    }

    function scrollToBottom() {
        messageBox.current.scrollTop = messageBox.current.scrollHeight
    }

    return (
        <main className='h-screen w-screen flex'>
            {/* LEFT CHAT PANEL */}
            <section className="left relative flex flex-col h-screen min-w-96 bg-slate-300">
                <header className='flex justify-between items-center p-2 px-4 w-full bg-slate-100 absolute z-10 top-0'>
                    <button className='flex gap-2' onClick={() => setIsModalOpen(true)}>
                        <i className="ri-add-fill mr-1"></i>
                        <p>Add collaborator</p>
                    </button>
                    <button onClick={() => setIsSidePanelOpen(!isSidePanelOpen)} className='p-2'>
                        <i className="ri-group-fill"></i>
                    </button>
                </header>

                <div className="conversation-area pt-14 pb-10 flex flex-col h-full relative">
                    <div
                        ref={messageBox}
                        className="message-box flex-grow flex flex-col gap-2 overflow-y-auto px-2 scrollbar-hide mt-[60px] mb-[56px]">
                        {messages.map((msg, index) => (
                            <div key={index}
                                className={`
                                    ${msg.sender._id === user._id.toString()
                                        ? 'bg-blue-200 text-black self-start'
                                        : 'bg-green-200 text-black self-end ml-auto'}
                                    message flex flex-col p-2 rounded-md max-w-xs break-words
                                `}>
                                <small className='opacity-65 text-xs'>{msg.sender.email}</small>
                                <div className='text-sm'>
                                    {msg.sender._id === 'ai' ? (
                                        msg.fileName ? (
                                            <p
                                                className="cursor-pointer text-blue-600 underline"
                                                onClick={() => {
                                                    setCurrentFile(msg.fileName)
                                                    setOpenFiles(prev => [...new Set([...prev, msg.fileName])])
                                                }}
                                            >
                                                {msg.message}
                                            </p>
                                        ) : (
                                            WriteAiMessage(msg.message)
                                        )
                                    ) : (
                                        <p>{msg.message}</p>
                                    )}
                                </div>
                            </div>
                        ))}
                    </div>

                    <div className="inputField w-full h-14 flex absolute bottom-0 bg-white border-t">
                        <input
                            value={message}
                            onChange={(e) => setMessage(e.target.value)}
                            className='px-3 outline-none flex-grow text-sm'
                            type="text"
                            placeholder='Enter message'
                        />
                        <button
                            onClick={send}
                            className='px-5 bg-slate-950 text-white flex items-center justify-center'>
                            <i className="ri-send-plane-fill"></i>
                        </button>
                    </div>
                </div>
            </section>

            {/* RIGHT PANEL */}
            <section className="right bg-red-50 flex-grow h-full flex">
                {/* FILE EXPLORER */}
                <div className="explorer h-full max-w-64 min-w-52 bg-slate-200">
                    <div className="file-tree w-full">
                        {Object.keys(fileTree).map((file, index) => (
                            <button
                                key={index}
                                onClick={() => {
                                    setCurrentFile(file)
                                    setOpenFiles([...new Set([...openFiles, file])])
                                }}
                                className="tree-element cursor-pointer p-2 px-4 flex items-center gap-2 bg-slate-300 w-full">
                                <p className='font-semibold text-lg truncate'>{file}</p>
                            </button>
                        ))}
                    </div>
                </div>

                {/* CODE EDITOR */}
                <div className="code-editor flex flex-col flex-grow h-full shrink">
                    <div className="top flex justify-between w-full">
                        <div className="files flex overflow-x-auto">
                            {openFiles.map((file, index) => (
                                <button
                                    key={index}
                                    onClick={() => setCurrentFile(file)}
                                    className={`open-file cursor-pointer p-2 px-4 flex items-center w-fit gap-2 bg-slate-300 ${currentFile === file ? 'bg-slate-400' : ''}`}>
                                    <p className='font-semibold text-sm truncate max-w-[150px]' title={file}>
                                        {file}
                                    </p>
                                </button>
                            ))}
                        </div>
                        <div className="actions flex gap-2">
                            <button
                                onClick={async () => {
                                    await webContainer.mount(fileTree)
                                    const installProcess = await webContainer.spawn("npm", ["install"])
                                    installProcess.output.pipeTo(new WritableStream({
                                        write(chunk) { console.log(chunk) }
                                    }))
                                    if (runProcess) runProcess.kill()
                                    let tempRunProcess = await webContainer.spawn("npm", ["start"])
                                    tempRunProcess.output.pipeTo(new WritableStream({
                                        write(chunk) { console.log(chunk) }
                                    }))
                                    setRunProcess(tempRunProcess)
                                    webContainer.on('server-ready', (port, url) => {
                                        setIframeUrl(url)
                                    })
                                }}
                                className='p-2 px-4 bg-slate-300 text-white'
                            >
                                run
                            </button>
                        </div>
                    </div>

                    <div className="bottom flex flex-grow max-w-full shrink overflow-auto">
                        {fileTree[currentFile] && (
                            <div className="code-editor-area h-full overflow-auto flex-grow bg-slate-50">
                                <pre className="hljs h-full">
                                    <code
                                        className="hljs h-full outline-none"
                                        contentEditable
                                        suppressContentEditableWarning
                                        onBlur={(e) => {
                                            const updatedContent = e.target.innerText
                                            const ft = {
                                                ...fileTree,
                                                [currentFile]: {
                                                    file: { contents: updatedContent }
                                                }
                                            }
                                            setFileTree(ft)
                                            saveFileTree(ft)
                                        }}
                                        dangerouslySetInnerHTML={{
                                            __html: hljs.highlight('javascript', fileTree[currentFile].file.contents).value
                                        }}
                                        style={{
                                            whiteSpace: 'pre-wrap',
                                            paddingBottom: '25rem',
                                            counterSet: 'line-numbering',
                                        }}
                                    />
                                </pre>
                            </div>
                        )}
                    </div>
                </div>

                {iframeUrl && webContainer && (
                    <div className="flex min-w-96 flex-col h-full">
                        <div className="address-bar">
                            <input
                                type="text"
                                onChange={(e) => setIframeUrl(e.target.value)}
                                value={iframeUrl}
                                className="w-full p-2 px-4 bg-slate-200"
                            />
                        </div>
                        <iframe src={iframeUrl} className="w-full h-full"></iframe>
                    </div>
                )}
            </section>
        </main>
    )
}

export default Project
